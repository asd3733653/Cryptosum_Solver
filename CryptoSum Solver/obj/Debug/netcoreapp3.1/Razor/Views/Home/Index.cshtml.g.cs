#pragma checksum "C:\Users\jacob.lee\source\repos\CryptoSum Solver\CryptoSum Solver\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "46b4fa31a8b313d08ed69cfffb30015cb43bf3c0"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\jacob.lee\source\repos\CryptoSum Solver\CryptoSum Solver\Views\_ViewImports.cshtml"
using CryptoSum_Solver;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jacob.lee\source\repos\CryptoSum Solver\CryptoSum Solver\Views\_ViewImports.cshtml"
using CryptoSum_Solver.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"46b4fa31a8b313d08ed69cfffb30015cb43bf3c0", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fa93d58d51e03edd12a88637b7cb8caa2fd32765", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery-3.4.1.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\jacob.lee\source\repos\CryptoSum Solver\CryptoSum Solver\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "46b4fa31a8b313d08ed69cfffb30015cb43bf3c03670", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<style>
    .row {
        text-align: center;
    }

    input {
        text-align: center;
    }

        input:read-only {
            background-color: antiquewhite;
        }
</style>
<div class=""row justify-content-md-center"">
    <div class=""col-sm-2"">
        <input type=""text"" value=""A"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""B"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""C"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""D"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""14"" maxlength=""2"" />
    </div>
    <div class=""w-100""></div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""E"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""F"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""G"" maxlength=""1");
            WriteLiteral(@""" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""H"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""23"" maxlength=""2"" />
    </div>
    <div class=""w-100""></div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""C"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""A"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""I"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""E"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""23"" maxlength=""2"" />
    </div>
    <div class=""w-100""></div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""I"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""D"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""F"" maxlength=""1"" />
    ");
            WriteLiteral(@"</div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""G"" maxlength=""1"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""25"" maxlength=""2"" />
    </div>
    <div class=""w-100""></div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""23"" maxlength=""2"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""18"" maxlength=""2"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""29"" maxlength=""2"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" value=""15"" maxlength=""2"" />
    </div>
    <div class=""col-sm-2"">
        <input type=""text"" id=""Answer"" maxlength=""2"" readonly />
    </div>
</div>
<div class=""row"">
    <div style=""margin: auto;"">
        <button id=""solver"">解題</button>
    </div>
</div>
<script>
    $(function () {
        //document readt
        //like $(document).ready()
        //監聽BODY下的INPUT元素
        //$(""body"").on(""input"", ""input"", function () {});
    ");
            WriteLiteral(@"    $(""body"").on(""click"", ""#solver"", function () {
            var allinput = $(""input[readonly]"");//查看條件值是否有被更改
            if (allinput.length < 1) {
                alert(""條件過多，請重新輸入"");
                window.location.reload();
            } else {
                $(""input"").each(function (index, element) {
                    //把所有INPUT的CLASS改為自己的符號
                    $(element).attr(""class"", $(element).val());
                });
                solver();
            }
        });
        //解題開始 mod by 羿辰 20200313
        function solver() {
            var $allinput = $(""input"");//所有的input元素
            var inputindex = [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18];//所有輸入的符號的位置
            var inputvalue = [4, 9, 14, 19, 20, 21, 22, 23];//所有輸入的總和的位置
            var allarr = []/*行列元素總和*/, rows = []/*列元素總和*/, columns = []/*行元素總和*/, row1 = []/*第1列元素陣列*/, row2 = []/*第2列元素陣列*/, row3 = []/*第3列元素陣列*/, row4 = []/*第4列元素陣列*/, column1 = []/*第1行元素陣列*/, column2 = []/*第2行元素陣列*/, column3 ");
            WriteLiteral(@"= []/*第3行元素陣列*/, column4 = []/*第4行元素陣列*/;
            var allsumarr = []/*所有數值陣列*/, allsum = 0 /*所有數值總和*/, row1sum = 0 /*第1列數值總和*/, row2sum = 0/*第2列數值總和*/, row3sum = 0/*第3列數值總和*/, row4sum = 0/*第4列數值總和*/, column1sum = 0/*第1行數值總和*/, column2sum = 0/*第2行數值總和*/, column3sum = 0/*第3行數值總和*/, column4sum = 0/*第4行數值總和*/;
            var T1 = """", T2 = """", T3 = """", T4 = """", T5 = """", T6 = """", T7 = """", T8 = """", T9 = """";//數字1~9對應的CLS
            var RemainNum = [1, 2, 3, 4, 5, 6, 7, 8, 9];//1~9都只能出現一次，出現過後移除剩下的數字
            var RemainEle = [];//只能有九個元素
            var PossibleNum = [];//可能的數字
            var PossibleEle = [];//可能的元素
            var checkodd = true;//檢查是否為奇數//預設奇數
            var step1arr = []/*在步驟1就解出來的符號*/, step2 = []/*步驟2陣列 儲存有跟解出來的符號相關的符號*/;

            getAllelement(inputindex);//取得所有不重複的符號 儲存在RemainEle陣列裡面
            getRowinput(row1, row2, row3, row4, rows, inputindex, allarr);//取得現在列的所有符號
            getColumninput(column1, column2, column3, column4, columns, inputindex, allarr);//取得現在行");
            WriteLiteral(@"的所有符號
            getSum();//取得行列加總
            allpush();//將現在行列的所有符號，推入ALL陣列裡面

            //檢誤行列總和是否相等，不相等報錯
            allsum = row1sum + row2sum + row3sum + row4sum;
            if (allsum != (column1sum + column2sum + column3sum + column4sum)) {
                alert(""行列總和有誤"");
                window.location.reload();
            }

            Step1();//STEP1 找9跟1的排列組合
            if (T9 != """" && T1 != """") /* 如果有在步驟1找到9跟1繼續往下執行 */ {
                Step2(T9, T1, step2);   //STEP2 找跟9有關的算式 並取差異
                Step3();                //STEP3 判斷總數是否為奇數，並將可能的數字剃除
                Step4();                
                Step5();
            } else {
                alert(""解謎失敗"");
            }

            //STEP1 找9跟1的排列組合
            function Step1() {
                for (let i = 0; i < allarr.length; i++) {
                    for (let j = i + 1; j < allarr.length; j++) {
                        switch (getArrEqual(allarr[i], allarr[j]).length) {
                           ");
            WriteLiteral(@" case 3:
                                //行列有3個重復的符號，比較不重復的符號差距
                                let diffarr = getArrDifference(allarr[i], allarr[j]);
                                logic(diffarr, allsumarr[i], allsumarr[j]);
                                break;
                            default:
                                break;
                        }
                    }
                }
            }

            //STEP2 找跟9有關的算式 並取差異
            function Step2(str1, str2, arr1) {
                remove(step1arr, str1);//移除找到的符號
                remove(step1arr, str2);//移除找到的符號
                for (var i = 2; i < 9; i++) {
                    for (var j = 1; j < arr1.length; j = j + 3) {
                        if (arr1[j] == str1 && (9 - i) == arr1[j - 1]) {
                            switch (i) {
                                case 2:
                                    T2 = arr1[j + 1];//2找到了
                                    remove(RemainNum, 2);
               ");
            WriteLiteral(@"                     remove(RemainEle, T2);
                                    break;
                                case 3:
                                    T3 = arr1[j + 1];//3找到了
                                    remove(RemainNum, 3);
                                    remove(RemainEle, T3);
                                    break;
                                case 4:
                                    T4 = arr1[j + 1];//4找到了
                                    remove(RemainNum, 4);
                                    remove(RemainEle, T4);
                                    break;
                                case 5:
                                    T5 = arr1[j + 1];//5找到了
                                    remove(RemainNum, 5);
                                    remove(RemainEle, T5);
                                    break;
                                case 6:
                                    T6 = arr1[j + 1];//6找到了
                                    re");
            WriteLiteral(@"move(RemainNum, 6);
                                    remove(RemainEle, T6);
                                    break;
                                case 7:
                                    T7 = arr1[j + 1];//7找到了
                                    remove(RemainNum, 7);
                                    remove(RemainEle, T7);
                                    break;
                                case 8:
                                    T8 = arr1[j + 1];//8找到了
                                    remove(RemainNum, 8);
                                    remove(RemainEle, T8);
                                    break;
                                default:
                                    break;
                            }
                            $(""."" + arr1[j + 1]).val(i);
                        }
                    }
                }
            }

            //STEP3 判斷總數是否為奇數，並將可能的數字剃除
            function Step3() {
                if (allsum % 2 != 1");
            WriteLiteral(@") {//判斷總和為奇數或是偶數
                    checkodd = false;
                }
                clearArrandget();//清除所有行列符號，並取尚未解出來符號
                CheckArr(2);//檢查目前行列中，有兩個已知兩個未知的行列
            }

            //檢查剩下的數字是否有符合奇偶數標準
            function Step4() {
                var elecount = [];//紀錄符號出現的次數
                let elementcount = 0;//計算符號出現的次數
                for (let i = 0; i < RemainEle.length; i++) {
                    elementcount = 0;//每更換一次符號重新計算
                    for (let j = 0; j < allarr.length; j++) {
                        if (getArrEqual(allarr[j], RemainEle[i]).length >= 1) {
                            if (elecount.find(x => x == RemainEle[i]) != RemainEle[i]) {
                                elementcount++;
                                elecount.push(RemainEle[i], elementcount);
                            } else if (elecount.find(x => x == RemainEle[i]) == RemainEle[i]) {
                                elementcount++;
                                elecount.sp");
            WriteLiteral(@"lice(i * 2 + 1, 1, elementcount);
                            }
                        }
                    }
                }
                //將出現次數除以2 因為行列有重複
                for (let i = 0; i < elecount.length / 2; i++) {
                    elecount.splice(i * 2 + 1, 1, elecount[i * 2 + 1] / 2);
                }
                for (var i = 0; i < elecount.length; i++) {
                    if (checkodd && elecount[i] == 1) {//如果是出現次數是1 且 總和也是奇數 只有357有可能
                        for (var j = 0; j < RemainEle.length; j++) {
                            if (RemainNum[j] % 2 != 0) {
                                switch (RemainNum[j]) {
                                    case 3:
                                        T3 = elecount[i - 1];
                                        $(""."" + elecount[i - 1]).val(3);
                                        remove(RemainNum, RemainNum[j]);
                                        remove(RemainEle, elecount[i - 1]);
                           ");
            WriteLiteral(@"             break;
                                    case 5:
                                        T5 = elecount[i - 1];
                                        $(""."" + elecount[i - 1]).val(5);
                                        remove(RemainNum, RemainNum[j]);
                                        remove(RemainEle, elecount[i - 1]);
                                        break;
                                    case 7:
                                        T7 = elecount[i - 1];
                                        $(""."" + elecount[i - 1]).val(7);
                                        remove(RemainNum, RemainNum[j]);
                                        remove(RemainEle, elecount[i - 1]);
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }
            ");
            WriteLiteral(@"    if (RemainNum.length == 1 && RemainEle.length == 1) {
                    switch (RemainNum[0]) {
                        case 2:
                            T2 = RemainEle[0];
                            $(""."" + RemainEle[0]).val(2);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        case 3:
                            T3 = RemainEle[0];
                            $(""."" + RemainEle[0]).val(3);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        case 4:
                            T4 = RemainEle[0];
                            $(""."" + RemainEle[0]).val(4);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                    ");
            WriteLiteral(@"    case 5:
                            T5 = RemainEle[0];
                            $(""."" + RemainEle[0]).val(5);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        case 6:
                            T6 = RemainEle[0];
                            $(""."" + RemainEle[0]).val(6);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        case 7:
                            T7 = RemainEle[0];
                            $(""."" + RemainEle[0]).val(7);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        case 8:
                            T8 = RemainEle[0];
                            $(""."" + RemainEle[0]).val(8);
    ");
            WriteLiteral(@"                        remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        default:
                            break;
                    }
                }
            }

            //檢查剩下的陣列是否只有一個未知數
            function Step5() {
                clearArrandget();
                CheckArr(3);//檢查剩下陣列是否只有一個未知，如果還有就繼續執行
                for (var i = 0; i < 6; i++) {
                    clearArrandget();
                    CheckArr(3);//檢查剩下陣列是否只有一個未知
                    if (T1 != """" && T2 != """" && T3 != """" && T4 != """" && T5 != """" && T6 != """" && T7 != """" && T8 != """" && T9 != """") {
                        $(""#Answer"").val(parseInt($(""input"").eq(0).val()) + parseInt($(""input"").eq(6).val()) + parseInt($(""input"").eq(12).val()) + parseInt($(""input"").eq(18).val()));
                        alert(""解題完成"");
                        break;
                    }
                }
            }

");
            WriteLiteral(@"            //檢查目前行列中有幾個已知的數字
            function CheckArr(int1) {
                for (let i = 0; i < allarr.length; i++) {
                    let NowNArr = getArrEqual(allarr[i], [""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""]);//相同的數字
                    let NowEArr = getArrEqual(allarr[i], [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I""]);//相同的元素
                    if (NowNArr.length == int1) {//找到有幾個相同的就執行
                        switch (int1) {
                            case 2:
                                //如果有兩個未知的進行邏輯比對
                                LogicComparison(allsumarr[i], NowNArr[0], NowNArr[1], NowEArr[0], NowEArr[1]);
                                break;
                            case 3:
                                CheckOneunknow(NowNArr, allsumarr[i], allarr[i]);
                                break;
                            default:
                        }
                    }
                }
            }

            //判斷一個未知數
            functi");
            WriteLiteral(@"on CheckOneunknow(arr1, int1, arr2) {
                //console.log(arr1, int1, arr2);
                var Now = getArrDifference(arr2, arr1);
                //console.log(Now[0]);
                for (var i = 0; i < arr1.length; i++) {
                    int1 = int1 - arr1[i]
                }
                switch (int1) {
                    case 2:
                        T2 = Now[0];
                        $(""."" + Now[0]).val(2);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    case 3:
                        T3 = Now[0];
                        $(""."" + Now[0]).val(3);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    case 4:
                        T4 = Now[0];
                        $(""."" + Now[0]).val(4);
                        remove(PossibleEle, Now[0]);
        ");
            WriteLiteral(@"                remove(PossibleNum, int1);
                        break;
                    case 5:
                        T5 = Now[0];
                        $(""."" + Now[0]).val(5);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    case 6:
                        T6 = Now[0];
                        $(""."" + Now[0]).val(6);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    case 7:
                        T7 = Now[0];
                        $(""."" + Now[0]).val(7);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    case 8:
                        T8 = Now[0];
                        $(""."" + Now[0]).val(8);
                        remove(PossibleEle, Now[0]);
                ");
            WriteLiteral(@"        remove(PossibleNum, int1);
                        break;
                    default:
                        break;
                }
            }

            //清空目前陣列並取得現在陣列
            function clearArrandget() {
                removeallrows(row1, row2, row3, row4);//清空陣列
                removeallrows(column1, column2, column3, column4);//清空陣列
                allarr = [];//清空陣列
                getRowinput(row1, row2, row3, row4, rows, inputindex, allarr);//取得現在列的所有元素
                getColumninput(column1, column2, column3, column4, columns, inputindex, allarr);//取得現在行的所有元素
            }

            //邏輯比對可能的數字，如果只有一組可能性就移除
            function LogicComparison(int1, int2, int3, str1, str2) {//int1 == 該行或列的數字總和
                var count = 0;//計數器，計算該數字總和是否只有出現一次
                var Num1 = 0, Num2 = 0;
                for (let i = 0; i < RemainNum.length; i++) {
                    for (let j = i + 1; j < RemainNum.length; j++) {
                        if (RemainNum[i] + R");
            WriteLiteral(@"emainNum[j] == int1 - int2 - int3) {
                            Num1 = RemainNum[i];
                            Num2 = RemainNum[j];
                            count++;
                        }
                    }
                }
                if (count == 1) {
                    PossibleNum.push(Num1);//可能的數字
                    PossibleNum.push(Num2);//可能的數字
                    PossibleEle.push(str1);//可能的符號
                    PossibleEle.push(str2);//可能的符號
                    remove(RemainNum, Num1);
                    remove(RemainNum, Num2);
                    remove(RemainEle, str1);
                    remove(RemainEle, str2);
                }
            }

            //邏輯計算1個不同符號的相差
            function logic(arr1, int1, int2) {
                //冒泡排序 保證大數在前
                if (int1 > int2) {
                    checkLogic((int1 - int2), arr1[0], arr1[1]);
                } else {
                    checkLogic((int2 - int1), arr1[1], arr1[0]);
              ");
            WriteLiteral(@"  }
                //如果沒有儲存在步驟1陣列裡面，就推進去//步驟1陣列是在步驟1就解出來的符號
                if (step1arr.findIndex(x => x == arr1[0]) < 0) {
                    step1arr.push(arr1[0]);
                }
                if (step1arr.findIndex(x => x == arr1[1]) < 0) {
                    step1arr.push(arr1[1]);
                }
                //console.log(step1arr);
            }

            //取得行列數值
            function getSum() {
                row1sum = parseInt($(""input"").eq(inputvalue[0]).val());
                row2sum = parseInt($(""input"").eq(inputvalue[1]).val());
                row3sum = parseInt($(""input"").eq(inputvalue[2]).val());
                row4sum = parseInt($(""input"").eq(inputvalue[3]).val());
                column1sum = parseInt($(""input"").eq(inputvalue[4]).val());
                column2sum = parseInt($(""input"").eq(inputvalue[5]).val());
                column3sum = parseInt($(""input"").eq(inputvalue[6]).val());
                column4sum = parseInt($(""input"").eq(inputvalue[7]).");
            WriteLiteral(@"val());
            }

            //推入ALL陣列
            function allpush() {
                allsumarr.push(row1sum);
                allsumarr.push(row2sum);
                allsumarr.push(row3sum);
                allsumarr.push(row4sum);
                allsumarr.push(column1sum);
                allsumarr.push(column2sum);
                allsumarr.push(column3sum);
                allsumarr.push(column4sum);
            }

            //步驟1相差邏輯
            function checkLogic(int1, cls1, cls2) {
                switch (int1) {
                    //如果相差是8那絕對是9跟1
                    case 8:
                        T9 = cls1;//9找到了
                        T1 = cls2;//1找到了
                        remove(RemainEle, cls1);
                        remove(RemainEle, cls2);
                        remove(RemainNum, 9);
                        remove(RemainNum, 1);
                        $(""."" + cls1).val(9);
                        $(""."" + cls2).val(1);
                        break");
            WriteLiteral(@";
                    //反之存入步驟二陣列
                    default:
                        step2.push(int1, cls1, cls2);
                        break;
                }
            }

            //移除指定元素
            function remove(arr, val) {
                var j = 0;
                for (var i = 0, l = arr.length; i < l; i++) {
                    if (arr[i] !== val) {
                        arr[j++] = arr[i];
                    }
                }
                arr.length = j;
            }

            //移除整行或是整列
            function removeallrows(arr1, arr2, arr3, arr4) {
                arr1.splice(0, arr1.length);
                arr2.splice(0, arr2.length);
                arr3.splice(0, arr3.length);
                arr4.splice(0, arr4.length);
            }

            //取得所有元素不重複
            function getAllelement(arr1) {
                for (var i = 0; i < arr1.length; i++) {
                    let Now = $(""input"").eq(arr1[i]).val();
                    if (Rema");
            WriteLiteral(@"inEle.find(x => x == Now) != Now) {
                        RemainEle.push(Now);
                    }
                }
            }
        }
        //取相同元素
        function getArrEqual(arr1, arr2) {
            var newArr = [];
            for (let i = 0; i < arr2.length; i++) {
                for (let j = 0; j < arr1.length; j++) {
                    if (arr1[j] === arr2[i]) {
                        newArr.push(arr1[j]);
                    }
                }
            }
            return newArr;
        }
        //取不同元素
        function getArrDifference(arr1, arr2) {
            return arr1.concat(arr2).filter(function (v, i, arr) {
                return arr.indexOf(v) === arr.lastIndexOf(v);
            });
        }
        //取得行符號陣列
        function getRowinput(arr1, arr2, arr3, arr4, arr5, arr6, allarr) {
            for (var i = 0; i < arr6.length; i++) {
                if (i < 4) {
                    arr1.push($(""input"").eq(arr6[i]).val());
                ");
            WriteLiteral(@"} else if (i >= 4 && i < 8) {
                    arr2.push($(""input"").eq(arr6[i]).val());
                } else if (i >= 8 && i < 12) {
                    arr3.push($(""input"").eq(arr6[i]).val());
                } else {
                    arr4.push($(""input"").eq(arr6[i]).val());
                }
            }
            push(arr1, arr2, arr3, arr4, arr5, allarr);
        }
        //取得列符號陣列
        function getColumninput(arr1, arr2, arr3, arr4, arr5, arr6, allarr) {
            for (var i = 0; i < arr6.length; i++) {
                var t = i % 4;
                switch (t) {
                    case 0:
                        arr1.push($(""input"").eq(arr6[i]).val());
                        break;
                    case 1:
                        arr2.push($(""input"").eq(arr6[i]).val());
                        break;
                    case 2:
                        arr3.push($(""input"").eq(arr6[i]).val());
                        break;
                    case 3:
        ");
            WriteLiteral(@"                arr4.push($(""input"").eq(arr6[i]).val());
                        break;
                    default:
                        break;
                }
            }
            push(arr1, arr2, arr3, arr4, arr5, allarr);
        }
        //PUSH進相關的位置
        function push(arr1, arr2, arr3, arr4, arr5, allarr) {
            allarr.push(arr1);
            allarr.push(arr2);
            allarr.push(arr3);
            allarr.push(arr4);
            arr5.push(arr1);
            arr5.push(arr2);
            arr5.push(arr3);
            arr5.push(arr4);
        }
    });

    (function ($) {
        //anonymous function
        //匿名函式
        // $.fn.myFunctionName = function(){script codes}
        //自己定義函式
    })(jQuery)
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
