@{
    ViewData["Title"] = "Home Page";
}
<script src="~/js/jquery-3.4.1.js"></script>
<style>
    .row {
        text-align: center;
    }

    input {
        text-align: center;
    }

        input:read-only {
            background-color: antiquewhite;
        }
</style>
<div class="row justify-content-md-center">
    <div class="col-sm-2">
        <input type="text" value="A" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="B" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="C" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="D" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="14" maxlength="2" />
    </div>
    <div class="w-100"></div>
    <div class="col-sm-2">
        <input type="text" value="E" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="F" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="G" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="H" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="23" maxlength="2" />
    </div>
    <div class="w-100"></div>
    <div class="col-sm-2">
        <input type="text" value="C" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="A" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="I" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="E" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="23" maxlength="2" />
    </div>
    <div class="w-100"></div>
    <div class="col-sm-2">
        <input type="text" value="I" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="D" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="F" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="G" maxlength="1" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="25" maxlength="2" />
    </div>
    <div class="w-100"></div>
    <div class="col-sm-2">
        <input type="text" value="23" maxlength="2" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="18" maxlength="2" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="29" maxlength="2" />
    </div>
    <div class="col-sm-2">
        <input type="text" value="15" maxlength="2" />
    </div>
    <div class="col-sm-2">
        <input type="text" id="Answer" maxlength="2" readonly />
    </div>
</div>
<div class="row">
    <div style="margin: auto;">
        <button id="solver">解題</button>
    </div>
</div>
<script>
    $(function () {
        //document readt
        //like $(document).ready()
        //監聽BODY下的INPUT元素
        //$("body").on("input", "input", function () {});
        $("body").on("click", "#solver", function () {
            var allinput = $("input[readonly]");//查看條件值是否有被更改
            if (allinput.length < 1) {
                alert("條件過多，請重新輸入");
                window.location.reload();
            } else {
                $("input").each(function (index, element) {
                    $(element).attr("class", $(element).val());
                });
                solver();
            }
        });
        //解題開始
        function solver() {
            var $allinput = $("input");//所有的input元素
            var inputindex = [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18]//所有輸入的符號位置
            var inputvalue = [4, 9, 14, 19, 20, 21, 22, 23]//所有輸入的總和位置
            var allarr = []/*行列元素總和*/, rows = []/*列元素總和*/, columns = []/*行元素總和*/, row1 = []/*第1列元素陣列*/, row2 = []/*第2列元素陣列*/, row3 = []/*第3列元素陣列*/, row4 = []/*第4列元素陣列*/, column1 = []/*第1行元素陣列*/, column2 = []/*第2行元素陣列*/, column3 = []/*第3行元素陣列*/, column4 = []/*第4行元素陣列*/;
            var allsumarr = []/*所有數值陣列*/, allsum = 0 /*所有數值總和*/, row1sum = 0 /*第1列數值總和*/, row2sum = 0/*第2列數值總和*/, row3sum = 0/*第3列數值總和*/, row4sum = 0/*第4列數值總和*/, column1sum = 0/*第1行數值總和*/, column2sum = 0/*第2行數值總和*/, column3sum = 0/*第3行數值總和*/, column4sum = 0/*第4行數值總和*/;
            var T1 = "", T2 = "", T3 = "", T4 = "", T5 = "", T6 = "", T7 = "", T8 = "", T9 = "";//1~9對應的CLS
            var RemainNum = [1, 2, 3, 4, 5, 6, 7, 8, 9];//1~9都只能出現一次，剩下的數字
            var RemainEle = [];//只有九個元素
            var PossibleNum = [];//可能的數字
            var PossibleEle = [];//可能的元素
            var checkodd = true;//檢查是否為奇數
            var step1arr = [], step2 = [];

            getAllelement(inputindex);
            //console.log(RemainEle);
            getRowinput(row1, row2, row3, row4, rows, inputindex, allarr);//取得現在列的所有元素
            getColumninput(column1, column2, column3, column4, columns, inputindex, allarr);//取得現在行的所有元素
            getSum();
            allpush();
            allsum = row1sum + row2sum + row3sum + row4sum;
            if (allsum != (column1sum + column2sum + column3sum + column4sum)) {
                alert("行列總和有誤");
                window.location.reload();
            }

            Step1();
            if (T9 != "" && T1 != "") {
                Step2(T9, T1, step2);
            }
            //console.log(T1, T2, T3, T4, T5, T6, T7, T8, T9);
            Step3();
            Step4();
            Step5();
            //STEP1 找9跟1
            function Step1() {
                for (let i = 0; i < allarr.length; i++) {
                    for (let j = i + 1; j < allarr.length; j++) {
                        switch (getArrEqual(allarr[i], allarr[j]).length) {
                            case 3:
                                //行列有3個重疊的，比較不重疊的差距
                                let diffarr = getArrDifference(allarr[i], allarr[j]);
                                logic(diffarr, allsumarr[i], allsumarr[j]);
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
            //STEP2 找跟9有關的算式 並取差異
            function Step2(str1, str2, arr1) {
                remove(step1arr, str1);
                remove(step1arr, str2);
                //console.log(arr1, str1, str2, step1arr);
                for (var i = 2; i < 9; i++) {
                    for (var j = 1; j < arr1.length; j = j + 3) {
                        if (arr1[j] == str1 && (9 - i) == arr1[j - 1]) {
                            switch (i) {
                                case 2:
                                    T2 = arr1[j + 1];//2找到了
                                    remove(RemainNum, 2);
                                    remove(RemainEle, T2);
                                    break;
                                case 3:
                                    T3 = arr1[j + 1];//3找到了
                                    remove(RemainNum, 3);
                                    remove(RemainEle, T3);
                                    break;
                                case 4:
                                    T4 = arr1[j + 1];//4找到了
                                    remove(RemainNum, 4);
                                    remove(RemainEle, T4);
                                    break;
                                case 5:
                                    T5 = arr1[j + 1];//5找到了
                                    remove(RemainNum, 5);
                                    remove(RemainEle, T5);
                                    break;
                                case 6:
                                    T6 = arr1[j + 1];//6找到了
                                    remove(RemainNum, 6);
                                    remove(RemainEle, T6);
                                    break;
                                case 7:
                                    T7 = arr1[j + 1];//7找到了
                                    remove(RemainNum, 7);
                                    remove(RemainEle, T7);
                                    break;
                                case 8:
                                    T8 = arr1[j + 1];//8找到了
                                    remove(RemainNum, 8);
                                    remove(RemainEle, T8);
                                    break;
                                default:
                                    break;
                            }
                            $("." + arr1[j + 1]).val(i);
                            //console.log(arr1[j + 1] + "=" + i);
                        }
                    }
                }
            }
            //STEP3 判斷總數是否為奇數，並將可能的數字剃除
            function Step3() {
                //console.log(allsum);
                //console.log(RemainNum);//顯示剩下的數字
                if (allsum % 2 != 1) {//判斷總和為奇數或是偶數
                    checkodd = false;
                }
                //console.log(checkodd);
                clearArrandget();
                //console.log(allarr);
                CheckArr(2);
                //console.log(RemainEle);
                //console.log(PossibleEle);
                //console.log(PossibleNum);
            }
            //檢查剩下的數字是否有符合奇偶數標準
            function Step4() {
                //console.log(allarr);
                var Search = [];
                var elecount = [];
                let elementcount = 0;
                for (let i = 0; i < RemainEle.length; i++) {
                    elementcount = 0;
                    for (let j = 0; j < allarr.length; j++) {
                        //console.log(allarr[j]);
                        if (getArrEqual(allarr[j], RemainEle[i]).length >= 1) {
                            if (elecount.find(x => x == RemainEle[i]) != RemainEle[i]) {
                                elementcount++;
                                elecount.push(RemainEle[i], elementcount);
                            } else if (elecount.find(x => x == RemainEle[i]) == RemainEle[i]) {
                                elementcount++;
                                elecount.splice(i * 2 + 1, 1, elementcount);
                            }
                        }
                    }
                }
                //console.log(elecount);
                //將出現次數除以2
                for (let i = 0; i < elecount.length / 2; i++) {
                    elecount.splice(i * 2 + 1, 1, elecount[i * 2 + 1] / 2);
                }
                //console.log(elecount);
                for (var i = 0; i < elecount.length; i++) {
                    if (checkodd && elecount[i] == 1) {
                        //console.log(i);
                        for (var j = 0; j < RemainEle.length; j++) {
                            //console.log(RemainNum[j] % 2);
                            if (RemainNum[j] % 2 != 0) {
                                //console.log(elecount[i - 1], RemainNum[j]);
                                switch (RemainNum[j]) {
                                    case 3:
                                        T3 = elecount[i - 1];
                                        remove(RemainNum, RemainNum[j]);
                                        remove(RemainEle, elecount[i - 1]);
                                        $("." + elecount[i - 1]).val(3);
                                        break;
                                    case 5:
                                        T5 = elecount[i - 1];
                                        remove(RemainNum, RemainNum[j]);
                                        remove(RemainEle, elecount[i - 1]);
                                        $("." + elecount[i - 1]).val(5);
                                        break;
                                    case 7:
                                        T7 = elecount[i - 1];
                                        remove(RemainNum, RemainNum[j]);
                                        remove(RemainEle, elecount[i - 1]);
                                        $("." + elecount[i - 1]).val(7);
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }
                if (RemainNum.length == 1 && RemainEle.length == 1) {
                    switch (RemainNum[0]) {
                        case 2:
                            T2 = RemainEle[0];
                            $("." + RemainEle[0]).val(2);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        case 3:
                            T3 = RemainEle[0];
                            $("." + RemainEle[0]).val(3);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        case 4:
                            T4 = RemainEle[0];
                            $("." + RemainEle[0]).val(4);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        case 5:
                            T5 = RemainEle[0];
                            $("." + RemainEle[0]).val(5);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        case 6:
                            T6 = RemainEle[0];
                            $("." + RemainEle[0]).val(6);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        case 7:
                            T7 = RemainEle[0];
                            $("." + RemainEle[0]).val(7);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        case 8:
                            T8 = RemainEle[0];
                            $("." + RemainEle[0]).val(8);
                            remove(RemainNum, RemainNum[0]);
                            remove(RemainEle, RemainEle[0]);
                            break;
                        default:
                            break;
                    }
                }
            }
            //檢查剩下的陣列是否只有一個未知數
            function Step5() {
                clearArrandget();
                CheckArr(3);//檢查剩下陣列是否只有一個未知
                for (var i = 0; i < 6; i++) {
                    clearArrandget();
                    CheckArr(3);//檢查剩下陣列是否只有一個未知
                    if (T1 != "" && T2 != "" && T3 != "" && T4 != "" && T5 != "" && T6 != "" && T7 != "" && T8 != "" && T9 != "") {
                        $("#Answer").val(parseInt($("input").eq(0).val()) + parseInt($("input").eq(6).val()) + parseInt($("input").eq(12).val()) + parseInt($("input").eq(18).val()));
                        alert("解題完成");
                        break;
                    }
                }
            }

            //檢查目前陣列有幾個已知的
            function CheckArr(int1) {
                for (let i = 0; i < allarr.length; i++) {
                    let NowNArr = getArrEqual(allarr[i], ["1", "2", "3", "4", "5", "6", "7", "8", "9"]);//相同的數字
                    let NowEArr = getArrEqual(allarr[i], ["A", "B", "C", "D", "E", "F", "G", "H", "I"]);//相同的元素
                    if (NowNArr.length == int1) {//找到有幾個相同的就執行
                        //debugger;
                        //console.log(NowNArr);
                        switch (int1) {
                            case 2:
                                LogicComparison(allsumarr[i], NowNArr[0], NowNArr[1], NowEArr[0], NowEArr[1]);
                                break;
                            case 3:
                                CheckOneunknow(NowNArr, allsumarr[i], allarr[i]);
                                break;
                            default:
                        }
                    }
                }
            }

            //判斷一個未知數
            function CheckOneunknow(arr1, int1, arr2) {
                //console.log(arr1, int1, arr2);
                var Now = getArrDifference(arr2, arr1);
                //console.log(Now[0]);
                for (var i = 0; i < arr1.length; i++) {
                    int1 = int1 - arr1[i]
                }
                switch (int1) {
                    case 2:
                        T2 = Now[0];
                        $("." + Now[0]).val(2);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    case 3:
                        T3 = Now[0];
                        $("." + Now[0]).val(3);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    case 4:
                        T4 = Now[0];
                        $("." + Now[0]).val(4);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    case 5:
                        T5 = Now[0];
                        $("." + Now[0]).val(5);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    case 6:
                        T6 = Now[0];
                        $("." + Now[0]).val(6);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    case 7:
                        T7 = Now[0];
                        $("." + Now[0]).val(7);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    case 8:
                        T8 = Now[0];
                        $("." + Now[0]).val(8);
                        remove(PossibleEle, Now[0]);
                        remove(PossibleNum, int1);
                        break;
                    default:
                        break;
                }
            }

            //清空目前陣列並取得現在陣列
            function clearArrandget() {
                removeallrows(row1, row2, row3, row4);//清空陣列
                removeallrows(column1, column2, column3, column4);//清空陣列
                allarr = [];//清空陣列
                getRowinput(row1, row2, row3, row4, rows, inputindex, allarr);//取得現在列的所有元素
                getColumninput(column1, column2, column3, column4, columns, inputindex, allarr);//取得現在行的所有元素
            }

            //邏輯比對可能的數字，如果只有一組就移除可能
            function LogicComparison(int1, int2, int3, str1, str2) {//int1 == 該行或列的數字總和
                var count = 0;//計數器，計算該數字總和是否只有出現一次
                var Num1 = 0, Num2 = 0;
                //console.log(int1 - int2 - int3);
                for (let i = 0; i < RemainNum.length; i++) {
                    for (let j = i + 1; j < RemainNum.length; j++) {
                        if (RemainNum[i] + RemainNum[j] == int1 - int2 - int3) {
                            Num1 = RemainNum[i];
                            Num2 = RemainNum[j];
                            count++;
                        }
                    }
                }
                if (count == 1) {
                    //console.log(Num1 + "+" + Num2 + "只出現一次");
                    PossibleNum.push(Num1);
                    PossibleNum.push(Num2);
                    PossibleEle.push(str1);
                    PossibleEle.push(str2);
                    remove(RemainNum, Num1);
                    remove(RemainNum, Num2);
                    remove(RemainEle, str1);
                    remove(RemainEle, str2);
                    //console.log(RemainNum);
                }
            }

            //邏輯計算3個重疊的相差
            function logic(arr1, int1, int2) {
                if (int1 > int2) {
                    //console.log((int1 - int2), arr1[0], arr1[1]);
                    checkLogic((int1 - int2), arr1[0], arr1[1]);
                } else {
                    //console.log((int2 - int1), arr1[1], arr1[0]);
                    checkLogic((int2 - int1), arr1[1], arr1[0]);
                }
                if (step1arr.findIndex(x => x == arr1[0]) < 0) {
                    step1arr.push(arr1[0]);
                }
                if (step1arr.findIndex(x => x == arr1[1]) < 0) {
                    step1arr.push(arr1[1]);
                }
            }

            //取得行列數值
            function getSum() {
                row1sum = parseInt($("input").eq(inputvalue[0]).val());
                row2sum = parseInt($("input").eq(inputvalue[1]).val());
                row3sum = parseInt($("input").eq(inputvalue[2]).val());
                row4sum = parseInt($("input").eq(inputvalue[3]).val());
                column1sum = parseInt($("input").eq(inputvalue[4]).val());
                column2sum = parseInt($("input").eq(inputvalue[5]).val());
                column3sum = parseInt($("input").eq(inputvalue[6]).val());
                column4sum = parseInt($("input").eq(inputvalue[7]).val());
            }

            //推入ALL陣列
            function allpush() {
                allsumarr.push(row1sum);
                allsumarr.push(row2sum);
                allsumarr.push(row3sum);
                allsumarr.push(row4sum);
                allsumarr.push(column1sum);
                allsumarr.push(column2sum);
                allsumarr.push(column3sum);
                allsumarr.push(column4sum);
            }

            //差異邏輯
            function checkLogic(int1, cls1, cls2) {
                switch (int1) {
                    case 8:
                        T9 = cls1;//9找到了
                        T1 = cls2;//1找到了
                        remove(RemainEle, cls1);
                        remove(RemainEle, cls2);
                        remove(RemainNum, 9);
                        remove(RemainNum, 1);
                        //console.log(cls1 + "=9");
                        //console.log(cls2 + "=1");
                        $("." + cls1).val(9);
                        $("." + cls2).val(1);
                        break;
                    default:
                        step2.push(int1, cls1, cls2);//寫法有問題
                        //console.log(step2);
                        break;
                }
            }

            //移除指定元素
            function remove(arr, val) {
                var j = 0;
                for (var i = 0, l = arr.length; i < l; i++) {
                    if (arr[i] !== val) {
                        arr[j++] = arr[i];
                    }
                }
                arr.length = j;
            }

            //移除整行或是整列
            function removeallrows(arr1, arr2, arr3, arr4) {
                arr1.splice(0, arr1.length);
                arr2.splice(0, arr2.length);
                arr3.splice(0, arr3.length);
                arr4.splice(0, arr4.length);
            }

            //取得所有元素不重複
            function getAllelement(arr1) {
                for (var i = 0; i < arr1.length; i++) {
                    let Now = $("input").eq(arr1[i]).val();
                    if (RemainEle.find(x => x == Now) != Now) {
                        RemainEle.push(Now);
                    }
                }
            }
        }
        //取相同元素
        function getArrEqual(arr1, arr2) {
            var newArr = [];
            for (let i = 0; i < arr2.length; i++) {
                for (let j = 0; j < arr1.length; j++) {
                    if (arr1[j] === arr2[i]) {
                        newArr.push(arr1[j]);
                    }
                }
            }
            return newArr;
        }
        //取不同元素
        function getArrDifference(arr1, arr2) {
            return arr1.concat(arr2).filter(function (v, i, arr) {
                return arr.indexOf(v) === arr.lastIndexOf(v);
            });
        }
        //取得行符號陣列
        function getRowinput(arr1, arr2, arr3, arr4, arr5, arr6, allarr) {
            for (var i = 0; i < arr6.length; i++) {
                if (i < 4) {
                    arr1.push($("input").eq(arr6[i]).val());
                } else if (i >= 4 && i < 8) {
                    arr2.push($("input").eq(arr6[i]).val());
                } else if (i >= 8 && i < 12) {
                    arr3.push($("input").eq(arr6[i]).val());
                } else {
                    arr4.push($("input").eq(arr6[i]).val());
                }
            }
            push(arr1, arr2, arr3, arr4, arr5, allarr);
        }
        //取得列符號陣列
        function getColumninput(arr1, arr2, arr3, arr4, arr5, arr6, allarr) {
            for (var i = 0; i < arr6.length; i++) {
                var t = i % 4;
                switch (t) {
                    case 0:
                        arr1.push($("input").eq(arr6[i]).val());
                        break;
                    case 1:
                        arr2.push($("input").eq(arr6[i]).val());
                        break;
                    case 2:
                        arr3.push($("input").eq(arr6[i]).val());
                        break;
                    case 3:
                        arr4.push($("input").eq(arr6[i]).val());
                        break;
                    default:
                        break;
                }
            }
            push(arr1, arr2, arr3, arr4, arr5, allarr);
        }
        //PUSH進相關的位置
        function push(arr1, arr2, arr3, arr4, arr5, allarr) {
            allarr.push(arr1);
            allarr.push(arr2);
            allarr.push(arr3);
            allarr.push(arr4);
            arr5.push(arr1);
            arr5.push(arr2);
            arr5.push(arr3);
            arr5.push(arr4);
        }
    });

    (function ($) {
        //anonymous function
        //匿名函式
        // $.fn.myFunctionName = function(){script codes}
        //自己定義函式
    })(jQuery)
</script>